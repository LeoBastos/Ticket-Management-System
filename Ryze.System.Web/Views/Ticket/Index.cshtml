@using Microsoft.AspNetCore.Identity
@using Ryze.System.Domain.Entity.Identity
@using Ryze.System.Domain.Enum
@using Ryze.System.Web.Models.Tickets
@using Ryze.System.Web.helpers
@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@inject RoleManager<IdentityRole> roleManager;
@model TicketListViewModel

@{
    ViewData["Title"] = "RyzeSystem";
}

    <p>
        <a asp-action="Create" class="btn btn-secondary">Cadastrar Ticket</a>
    </p>

    <div class="col-sm-12 col-md-12 col-lg-12">
        <div class="card">
            <div class="card-header">
                <div class="card-title">
                    <div class="form-group" style="display:flex;">
                        <div class="col-sm-8 col-md-8 col-lg-8">
                        Todos os Tickets
                        </div>
                        <div class="col-sm-4 col-md-4 col-lg-4">
                            <form asp-action="Search" method="get">
                                <div class="form-group d-flex">
                                    <input type="text" name="searchTerm" value="@Model.SearchTerm" class="form-control" placeholder="Buscar por cliente ou funcionário" />
                                    <button type="submit" class="btn btn-secondary">Buscar</button>
                                </div>
                                
                            </form>
                        </div>                        
                    </div>
                   
                </div>
            </div>
            <div class="card-body">
            <div class="table-responsive" id="ticketTableContainer">
                @await Html.PartialAsync("_TicketTablePartial", Model.Tickets)
                <!-- Modal Forwarding -->
                <div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title" id="exampleModalLabel">Encaminhar Ticket</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                            </div>
                            <div class="modal-body">
                                <div id="modal-content-placeholder"></div>
                            </div>                           
                        </div>
                    </div>
                </div>


                <!-- Modal Take Ticket -->
                <div class="modal fade" id="takeTicket" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title" id="exampleModalLabel2">Assumir este Ticket</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                            </div>
                            <div class="modal-body">
                                <div id="modal-content-takeTicket"></div>
                            </div>
                        </div>
                    </div>
                </div>
                </div>

            </div>       
            @await Component.InvokeAsync("Pagination", new
                {
                    totalItems = Model.TotalItems,
                    currentPage = Model.PageNumber,
                    pageSize = Model.PageSize,
                    action = "Index",
                    controller = "Ticket"
                })
        </div>
    </div>


@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            let sortOrder = "asc";

            function addSortEvent(elementId, sortType) {
                const element = document.getElementById(elementId);
                if (element) {
                    element.addEventListener("click", function (e) {
                        e.preventDefault();
                        sortOrder = sortOrder === "asc" ? "desc" : "asc";

                        fetch(`/Ticket/SortTickets?sortOrder=${sortOrder}&sortType=${sortType}`)
                            .then(response => response.text())
                            .then(data => {
                                document.querySelector("#ticketTableContainer").innerHTML = data;
                                reapplySortEvents(); // Re-associar eventos a todos os elementos após atualizar a tabela
                            })
                            .catch(error => console.error('Error:', error));
                    });
                } else {
                    console.error(`Element with ID '${elementId}' not found.`);
                }
            }

            function reapplySortEvents() {
                addSortEvent("sortDtOpen", "OpeningDate");
                addSortEvent("sortPriority", "Priority");
                addSortEvent("sortStatus", "Status");
            }

            // Aplica os eventos de ordenação inicialmente
            reapplySortEvents();
        });
    </script>



<script>
    $(document).ready(function () {
        $('a[data-bs-toggle="modal"]').click(function (e) {
            e.preventDefault();
            var target = $(this).attr('data-bs-target');
            var url = $(this).attr('data-url');

            if (target === '#exampleModal') {
                $('#modal-content-placeholder').load(url);
            } else if (target === '#takeTicket') {
                $('#modal-content-takeTicket').load(url);
            }
        });
    });
</script>

}
